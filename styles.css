/* 
==========
Variables
==========
*/
:root {
  --primaryColor: #f15025;
  --mainBlack: #222;
  --mainWhite: #fff;
  --offWhite: #f7f7f7;
  --darkGrey: #afafaf;
  --mainTransition: all 0.3s linear;
  --mainSpacing: 0.2rem;
}

/* 
==========
Global Styles Variables
==========
*/

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Fira Code", monospace;
  color: var(--mainBlack);
  background: var(--mainWhite);
  line-height: 1.5;
}
a {
  text-decoration: none;
}
img {
  display: block;
  width: 100%;
}

h1,
h2,
h3 {
  text-transform: capitalize;
  letter-spacing: var(--mainSpacing);
  margin-bottom: 1.25rem;
}
h1 {
  font-size: 3rem;
}
h2 {
  margin-bottom: 0;
}
p {
  font-weight: 300;
  font-size: 0.7rem;
  line-height: 2;
}

/* 
=============
The first mini-project is a navbar layout.
=============
*/

.btn {
  display: inline-block;
  padding: 0.5rem 1rem;
  text-transform: capitalize;
  border: 3px solid var(--primaryColor);
  color: var(--primaryColor);
  margin: 3rem;
  transition: var(--mainTransition);
}
.btn:hover {
  background: var(--primaryColor);
  color: var(--mainWhite);
}
.main-navbar {
  background: var(--darkGrey);
  padding: 0 2rem;
}
.main-navbar li {
  list-style-type: none;
}
.main-navbar a {
  display: block;
  text-transform: capitalize;
  padding: 1rem 0;
  color: var(--primaryColor);
  letter-spacing: var(--mainSpacing);
  transition: var(--mainTransition);
}

.main-navbar a:hover {
  color: var(--mainBlack);
}

@media screen and (min-width: 776px) {
  .main-navbar ul {
    max-width: 1170px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: repeat(4, 1fr);
  }
}

/* 
============
Hero
============
*/
.hero-header {
  min-height: 100vh;
  background: var(--primaryColor);
  color: var(--mainWhite);
  display: grid;
  justify-content: center;
  align-items: center;
}

.hero-banner p {
  width: 80%;
  max-width: 560px;
  font-size: 1rem;
}
@media screen and (max-width: 600px) {
  .hero-banner {
    padding: 0 3rem;
  }
}
@media screen and (min-width: 768px) {
  .hero-header {
    background: linear-gradient(rgba(241, 80, 37, 0.4), rgba(0, 0, 0, 0.4)),
      url("./images/image-2.jpeg") center/cover fixed no-repeat;
  }
}

/* 
============
Cards
============
*/
.title {
  text-align: center;
}
.cards {
  padding: 4rem 0;
}
.cards-center {
  width: 80vw;
  max-width: 1170px;
  object-fit: cover;
  margin: 2rem auto;
}
.card {
  border: 1px solid var(--darkGrey);
  margin-bottom: 3rem;
  border-top-left-radius: 1.5rem;
  border-top-right-radius: 1.5rem;
  overflow: hidden;
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: auto 1fr auto;
}
.card-image-container {
  background: linear-gradient(rgba(241, 80, 37, 0.4), rgba(0, 0, 0, 0.4));
  overflow: hidden;
}
.card-image {
  border-top-left-radius: 1.5rem;
  border-top-right-radius: 1.5rem;
  transition: var(--mainTransition);
}
.card-image:hover {
  opacity: 0.6;
  transform: scale(1.07);
}
.card-info {
  padding: 1rem;
}
.card-footer {
  background: var(--darkGrey);
  padding: 0.5rem 1rem;
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  justify-items: center;
  color: var(--primaryColor);
}
@media screen and (min-width: 768px) {
  .cards-center {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    column-gap: 2.5rem;
  }
}
/* @media screen and (min-width: 1170px) {
  .cards-center {
    grid-template-columns: repeat(3, 1fr);
    column-gap: 2.5rem;
    display: grid;
  }
  .card {
    max-width: 90vh;
    margin: 1rem auto;
  }
} */

/* 
A substitute for media queries in grid is auto-fill. There are five steps to using it:
Step 1: Calculate the  width of one column.
Step 1: convert the column-gap property into pixels. e.g the gap property is 2.5rem which is 40px.
Step 2: add all the gap property you will need in the column. A three column has two gap-property, a four column has three gap-property.
Step 3: subtract the value of the gap-properties from the max -width e.g (Let's use a three column with two gap properties) 1170px - (40px * 2) = 1090px.
Step 4: Divide the product with the number of columns. This is the minimum value. 1090px / 3 = 363px. This is the width if one column.
Step 5: set the grid-template-columns to repeat(auto-fill, minmax(the minumum value, maximum value).
*/
.cards-center {
  display: grid;
  column-gap: 2.5rem;
  grid-template-columns: repeat(auto-fill, minmax(335px, 1fr));
}

/* 
============
Tiles
============
*/
.tiles {
  padding: 4rem 0;
}
.tiles-center {
  width: 90vw;
  max-width: 1170px;
  margin: 2rem auto;
  display: grid;
  row-gap: 2rem;
  column-gap: 2rem;
}
@media screen and (min-width: 768px) {
  .tiles-center {
    grid-template-columns: 1fr 1fr;
    column-gap: 2rem;
  }
}
@media screen and (min-width: 992px) {
  .tiles-center {
    grid-template-columns: repeat(3, 1fr);
    column-gap: 2rem;
  }
}
@media screen and (min-width: 1170px) {
  .tiles-center {
    grid-template-columns: repeat(4, 200px);
    grid-template-rows: repeat(5, 200px);
    grid-template-areas:
      "a a a b"
      "a a a c"
      "d d d d"
      "e f f f"
      "e g h i";
  }
  .tile-image {
    height: 100%;
    object-fit: cover;
  }
  .tile-1 {
    grid-area: a;
  }
  .tile-2 {
    grid-area: b;
  }
  .tile-3 {
    grid-area: c;
  }
  .tile-4 {
    grid-area: d;
  }
  .tile-5 {
    grid-area: e;
  }
  .tile-6 {
    grid-area: f;
  }
  .tile-7 {
    grid-area: g;
  }
  .tile-8 {
    grid-area: h;
  }
  .tile-9 {
    grid-area: i;
  }
}

/* 
============
Layout
============
*/
.header {
  background: var(--primaryColor);
  color: var(--mainWhite);
  text-align: center;
  padding: 0.5rem 0;
}
.navbar {
  background: var(--darkGrey);
}
.navbar li {
  list-style-type: none;
}
.navbar a {
  padding: 1rem;
  display: inline-block;
  text-transform: capitalize;
  letter-spacing: var(--mainSpacing);
  font-size: 1.2rem;
  color: var(--mainBlack);
  transition: var(--mainTransition);
}
.navbar a:hover {
  color: var(--mainWhite);
}
.content {
  padding: 2rem;
}
.content p {
  font-size: 1rem;
}
.sidebar {
  background: var(--primaryColor);
  padding: 1rem 0;
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  justify-items: center;
  color: var(--mainWhite);
  font-size: 1.2rem;
}
.footer {
  background: var(--mainBlack);
  color: var(--mainWhite);
  text-align: center;
  text-transform: capitalize;
  padding: 0.5rem 0;
}
.footer p {
  font-size: 1rem;
}
.main {
  min-height: 100vh;
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: auto auto 1fr auto auto;
}
@media screen and (min-width: 768px) {
  .navbar ul {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    justify-items: center;
  }
}
@media screen and (min-width: 992px) {
  .main {
    grid-template-columns: [start] 200px [col-1-end] 1fr [col-2-end] 50px [end];
    grid-template-rows: [start] auto [row-1-end] 1fr [row-2-end] auto [end];
  }
  .header {
    grid-column: start/end;
    grid-row: start/row-1-end;
  }
  .navbar {
    grid-column: start/col-1-end;
    grid-row: row-1-end/row-2-end;
  }
  .sidebar {
    grid-column: col-2-end/end;
    grid-row: row-1-end/row-2-end;
    min-height: 100%;
  }
  .footer {
    grid-column: start/end;
    grid-row: row-2-end/end;
  }
  .navbar ul {
    grid-template-columns: 1fr;
    min-height: 100%;
  }
  .sidebar {
    grid-template-columns: 1fr;
    min-height: 100%;
    background: var(--darkGrey);
  }
}
/* @media screen and (min-width: 992px) {
  .navbar ul {
    display: grid;
    grid-template-columns: 1fr;
  }
  .sidebar {
    grid-template-columns: 1fr;
  }
  .main {
    display: grid;
    grid-template-columns: repeat(3, auto 1fr auto);
    grid-template-rows: repeat(3, auto 1fr auto);
    grid-template-areas:
      "a a a"
      "b c d"
      "e e e";
  }
  .header {
    grid-area: a;
  }
  .navbar {
    grid-area: b;
  }
  .content {
    grid-area: c;
  }
  .sidebar {
    grid-area: d;
  }
  .footer {
    grid-area: e;
  }
  .sidebar {
    display: grid;
    background: var(--darkGrey);
    grid-template-rows: repeat(4, 1fr);
  }
} */
